// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user"."core" (email, hash, first_name, last_name)
VALUES ($1, $2, $3, $4)
RETURNING id, email, hash, first_name, last_name, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Email     string `json:"email"`
	Hash      string `json:"hash"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (UserCore, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Hash,
		arg.FirstName,
		arg.LastName,
	)
	var i UserCore
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Hash,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, hash, first_name, last_name, created_at, updated_at, deleted_at FROM "user"."core" WHERE email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (UserCore, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i UserCore
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Hash,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
